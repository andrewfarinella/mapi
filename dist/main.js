'use strict';function _interopDefault(a){return a&&'object'==typeof a&&'default'in a?a['default']:a}var axios=_interopDefault(require('axios')),_extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a};const PapiEndpoint=class{constructor(a){const b=_extends({},{method:'GET',endpoint:'/',hasParams:!1,params:[],hasBody:!1,requiresAuth:!1,alias:''},a);if(-1===['GET','HEAD','POST','PUT','DELETE','CONNECT','OPTIONS','TRACE','PATCH'].indexOf(b.method.toUpperCase()))throw new Error(`Endpoint "${b.alias}" method ${b.method} is not supported.`);// First: Handle User Provided Params
if(!(b.params.length&&0<b.params.length)){// Second: Attempt to auto handle params
// Params were not passed, but we will attempt to parse unless told in arguments they don't exist
// This regex is used to match the param pattern ':param?'
const a=/:[0-9A-z_-]+\?{0,1}/gm;for(let c;null!==(c=a.exec(b.endpoint));)c.forEach(a=>{const c=a.replace(/[:?]/g,''),d=!a.includes('?');b.params.push({slug:c,pattern:a,required:d})})}else// Auto bulid param objects based on a string-only array
// e.g. args.params = ['id', 'start-date', 'end-date']
if('string'==typeof b.params[0]){const a=[];for(const c of b.params){a.push({slug:c,pattern:':'+c,required:!0})}b.params=a}// Error if params are expected but NOT found
if(b.hasParams&&!b.params.length)throw new Error(`Endpoint "${b.alias}" is expecting parameters but couldn't find any in the endpoint uri or arguments.`);this.method=b.method,this.endpoint=b.base+b.endpoint,this.hasParams=!!b.params.length,this.params=this.hasParams?b.params:null,this.hasBody=b.hasBody,this.requiresAuth=b.requiresAuth,this.alias=b.alias}buildRequestOptions(){if(this.requiresAuth);return{}}getEndpoint(a){let b=this.endpoint;if(this.hasParams)// Handle passed data
if(a)switch(typeof a){case'number':case'string':if(1===this.params.length)b=b.replace(this.params[0].pattern,a);else throw new Error(`Endpoint "${this.alias}" tried to create an endpoint uri but is missing parameters.`);break;case'object':for(const c of this.params)if(a&&a[c.slug])b=b.replace(c.pattern,a[c.slug]);else if(!c.required)b=b.replace(c.pattern,'');else throw new Error(`Endpoint "${this.alias}" tried to create an endpoint uri but couldn't find the necessary data for the parameter ${c.slug}.`);break;default:throw new Error(`Endpoint "${this.alias}" tried to create an endpoint uri but can't understand the data it was passed.`);}else for(const a of this.params)if(a.required)throw new Error(`Endpoint "${this.alias}" tried to create an endpoint uri but is missing arguments.`);else b=b.replace(a.pattern,'');return b}call(...a){const b=this.buildRequestOptions(),c=this.hasParams?a[0]:null,d=this.hasBody?this.hasParams?a[1]:a[0]:null;if(this.hasBody&&!d)throw new Error(`Endpoint "${this.alias}" is expecting a request body but couldn't find any.`);const e=this.getEndpoint(c);switch(this.method){case'GET':return axios.get(e,b);case'DELETE':return axios.delete(e,b);case'HEAD':return axios.head(e,b);case'OPTIONS':return axios.options(e,b);case'POST':return axios.post(e,d,b);case'PUT':return axios.put(e,d,b);case'PATCH':return axios.patch(e,d,b);default:throw new Error(`Endpoint "${this.alias}" method ${this.method} is not supported.`);}}},PapiService=class{constructor(a){const b={base:'/',defaultEndpoints:!0,hasHealthCheck:!0,healthCheck:{method:'GET',endpoint:'/health',hasBody:!1,requiresAuth:!1,alias:'health'},endpoints:[{method:'GET',endpoint:'/:id?',hasParams:!0,hasBody:!1,requiresAuth:!0,alias:'get'},{method:'POST',endpoint:'/',hasParams:!1,hasBody:!0,requiresAuth:!0,alias:'create'},{method:'PUT',endpoint:'/:id',hasParams:!0,hasBody:!0,requiresAuth:!0,alias:'update'},{method:'DELETE',endpoint:'/:id',hasParams:!0,hasBody:!1,requiresAuth:!0,alias:'delete'}],services:[]},c=_extends({},b,a);c.defaultEndpoints&&(c.endpoints=[...b.endpoints,...a.endpoints]),this._name=c.name,this._base=c.base,this.endpoints=[],this.registerEndpoints(c.endpoints),this.registerSubServices(c.services),c.hasHealthCheck&&this.registerHealthCheckEndpoint(c.healthCheck)}registerEndpoint(a){if(!a)throw new Error(`Service ${this._name} tried to register an endpoint but is missing arguments.`);if(!a.alias||''===a.alias)throw new Error(`Service ${this._name} tried to register an endpoint but is missing an alias.`);if('undefined'!=typeof this[a.alias])throw new Error(`Service ${this._name} already has the ${a.alias} endpoint defined.`);let b=this.endpoints.push(new PapiEndpoint(_extends({},a,{base:this._base})))-1;this[a.alias]=(a,c)=>this.endpoints[b].call(a,c)}registerEndpoints(a){if(!a)throw new Error(`Service ${this._name} tried to register endpoints but is missing arguments.`);if(!Array.isArray(a))throw new Error(`Service ${this._name} tried to register endpoints but was given a(n) ${typeof a} instead.`);for(const b in a)this.registerEndpoint(a[b])}registerSubServices(a){for(const b in a)if(a.hasOwnProperty(b)){const c=a[b];if(!c.name&&!c.base)throw new Error('Cannot register service.');if(c.base||(c.base='/'+c.name),c.base.startsWith('/')||(c.base='/'+c.base),c.endpoints=c.endpoints||[],c.services=c.services||[],c.base=this._base+c.base,this[c.name]=new PapiService(c),c.methods&&'object'==typeof c.methods)for(const a in c.methods)if(c.methods.hasOwnProperty(a)){const b=c.methods[a];this[c.name][a]=b}}}registerHealthCheckEndpoint(a){this.registerEndpoints([a])}},Papi=class{constructor(a){if(!a)throw new Error('Missing API configuration.');if(!a.base)throw new Error('Missing API Base URL.');if(this._base=a.base,a.services&&Array.isArray(a.services))for(const b of a.services)this.registerService(b);if(a.headers&&Array.isArray(a.headers))for(const b in a.headers)if(a.headers.hasOwnProperty(b)){const c=a.headers[b];axios.defaults.headers.common[c[0]]=c[1]}}updateHeader(a,b){b=b||'common',axios.defaults.headers[b][a[0]]=a[1]}registerService(a){if(!a)throw new Error('Missing service configuration.');const b='string'==typeof a?{name:a}:a;if(!b.name)throw new Error('Missing service name.');if(b.base||(b.base=b.name),b.base.startsWith('/')||(b.base='/'+b.base),b.endpoints=b.endpoints||[],b.services=b.services||[],b.base=this._base+b.base,!this[b.name])this[b.name]=new PapiService(b);else throw new Error(`Service ${b.name} is already registered.`);if(b.methods&&'object'==typeof b.methods)for(const a in b.methods)if(b.methods.hasOwnProperty(a)){const c=b.methods[a];this[b.name][a]=c}}};var index=a=>new Papi(a);module.exports=index;
